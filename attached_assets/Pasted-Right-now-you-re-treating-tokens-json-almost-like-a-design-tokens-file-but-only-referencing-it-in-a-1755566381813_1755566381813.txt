Right now you’re treating tokens.json almost like a design tokens file, but only referencing it in a few places (like palette.primary and your button override).

If you want everything in tokens.json to drive the theme universally (colors, spacing, typography, radii, shadows, gradients, etc.), here’s how you can wire it up properly:

1. Expand your tokens.json

Instead of only color, give it a design-system structure:

{
  "color": {
    "primary": "#5e72e4",
    "primaryLight": "#7d8df0",
    "primaryGradientStart": "#667eea",
    "primaryGradientEnd": "#764ba2",
    "secondary": "#8392ab",
    "info": "#1a73e8",
    "success": "#4caf50",
    "warning": "#fb8c00",
    "error": "#f44335",
    "textOnBrand": "#ffffff",
    "backgroundLight": "#f0f2f5",
    "backgroundDark": "#0E1626",
    "slate": "#7b809a"
  },
  "radius": {
    "sm": 8,
    "md": 14,
    "lg": 20
  },
  "shadow": {
    "sm": "0px 1px 3px rgba(0,0,0,0.1)",
    "md": "0px 4px 6px rgba(0,0,0,0.1)",
    "lg": "0px 10px 15px rgba(0,0,0,0.1)"
  },
  "font": {
    "family": "'Inter', system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif",
    "size": {
      "sm": "0.875rem",
      "md": "1rem",
      "lg": "1.25rem",
      "xl": "1.5rem"
    }
  },
  "spacing": {
    "xs": 4,
    "sm": 8,
    "md": 16,
    "lg": 24,
    "xl": 32
  }
}

2. Map tokens → theme

In muiTheme.ts, import tokens once and pipe them everywhere:

import { createTheme } from "@mui/material/styles";
import tokens from "./tokens.json";

// Augment the theme to add tokens if you want TypeScript autocompletion
declare module "@mui/material/styles" {
  interface Theme {
    tokens: typeof tokens;
    gradients: {
      primary: string;
      secondary: string;
      info: string;
      success: string;
      warning: string;
      error: string;
    };
  }
  interface ThemeOptions {
    tokens?: typeof tokens;
    gradients?: Theme["gradients"];
  }
}

const gradients = {
  primary: `linear-gradient(45deg, ${tokens.color.primaryGradientStart} 30%, ${tokens.color.primaryGradientEnd} 90%)`,
  secondary: `linear-gradient(45deg, ${tokens.color.secondary} 30%, ${tokens.color.secondary} 90%)`,
  info: `linear-gradient(45deg, ${tokens.color.info} 30%, ${tokens.color.info} 90%)`,
  success: `linear-gradient(45deg, ${tokens.color.success} 30%, ${tokens.color.success} 90%)`,
  warning: `linear-gradient(45deg, ${tokens.color.warning} 30%, ${tokens.color.warning} 90%)`,
  error: `linear-gradient(45deg, ${tokens.color.error} 30%, ${tokens.color.error} 90%)`
};

const common = {
  shape: { borderRadius: tokens.radius.md },
  typography: {
    fontFamily: tokens.font.family,
    fontSize: parseFloat(tokens.font.size.md),
  },
  spacing: (factor: number) => `${factor * tokens.spacing.sm}px`,
  shadows: [
    "none",
    tokens.shadow.sm,
    tokens.shadow.md,
    tokens.shadow.lg
  ],
  tokens,     // <-- add raw tokens for direct use
  gradients   // <-- add computed gradients
};

export const lightTheme = createTheme({
  ...common,
  palette: {
    mode: "light",
    primary: {
      main: tokens.color.primary,
      light: tokens.color.primaryLight,
      contrastText: tokens.color.textOnBrand
    },
    background: {
      default: tokens.color.backgroundLight,
      paper: "#F7FAFC"
    },
    text: {
      primary: "#0B1220",
      secondary: tokens.color.slate
    },
    success: { main: tokens.color.success },
    warning: { main: tokens.color.warning },
    error:   { main: tokens.color.error }
  }
});

export const darkTheme = createTheme({
  ...common,
  palette: {
    mode: "dark",
    primary: {
      main: tokens.color.primaryLight,
      light: "#6FB8FF",
      contrastText: tokens.color.textOnBrand
    },
    background: {
      default: tokens.color.backgroundDark,
      paper: "#0E1626"
    },
    text: {
      primary: "#E6EEF8",
      secondary: "#B5C1D1"
    },
    success: { main: tokens.color.success },
    warning: { main: tokens.color.warning },
    error:   { main: tokens.color.error }
  }
});

3. Consume tokens anywhere

Now you can pull from theme.tokens or theme.gradients in sx or styled:

<Box sx={(theme) => ({
  borderRadius: theme.tokens.radius.lg,
  boxShadow: theme.tokens.shadow.md,
  padding: theme.tokens.spacing.md,
  background: theme.gradients.primary,
  color: theme.palette.primary.contrastText
})}>
  Universal tokens in action
</Box>

✅ Result

All primitives (colors, gradients, radii, shadows, fonts, spacing) live in tokens.json.

Both lightTheme and darkTheme pipe directly from tokens.

In components, you can always use theme.tokens and know it’s the single source of truth.

Changing tokens.json updates the entire app everywhere — buttons, boxes, papers, etc.